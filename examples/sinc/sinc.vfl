
# create a pseudorandom number generator.
rand = rng(seed: 7321);

# create a model.
mdl = vfr(
  alpha0: 1000,
  beta0: 2.5,
  nu: 1e-3,
  data: data(file: 'sinc.dat'),
  factors: 10 * [impulse(mu: 0, tau: 0.01)]
);

# randomize the factor means.
for j in std.range(n: mdl.M) {
  mdl.factors[j].mu = rand.normal(sigma: 2.5);
}

# create a full-gradient optimizer.
opt = fg(
  model: mdl,
  lipschitzInit: 0.0001
);

# optimize.
opt.execute();

# build gridded datasets for prediction.
G = [[-10, 1e-3, 10]];
mean = data(grid: G);
var = data(grid: G);

# compute the model prediction.
mdl.predict(mean: mean, var: var);

# write the prediction results.
mean.write(file: 'mean.dat');
var.write(file: 'var.dat');

