
# create a pseudorandom number generator.
rand = rng(seed: 7321);

# define the randomization parameters.
x0 = -0.25;
y0 =  0.45;
sigma = 0.5;

# create a model.
mdl = vfc(
  nu: 1.0e-6,
  data: data(file: 'ripley.dat'),
  factors: 10 * [impulse(dim: 0, mu: 0, tau: 10) *
                 impulse(dim: 1, mu: 0, tau: 10)]
);

# randomize the factor means.
for j in std.range(n: mdl.M) {
  mdl.factors[j][0].mu = rand.normal(mu: x0, sigma: sigma);
  mdl.factors[j][1].mu = rand.normal(mu: y0, sigma: sigma);
  mdl.factors[j].update();
}

# create a full-gradient optimizer.
opt = fg(
  model: mdl,
  maxIters: 50
);

# optimize.
opt.execute();

# build gridded datasets for prediction.
G = [[-1.5, 0.01, 1.0],
     [-0.3, 0.02, 1.2]];
mean = data(grid: G);
var = data(grid: G);

# compute the model prediction.
mdl.predict(mean: mean, var: var);

# write the prediction results.
mean.write(file: 'mean.dat');
var.write(file: 'var.dat');

